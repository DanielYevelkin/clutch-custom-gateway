import React from "react";
import { Button, ButtonGroup, client, Confirmation, MetadataTable, NotePanel, Resolver, useWizardContext, } from "@clutch-sh/core";
import { useDataLayout } from "@clutch-sh/data-layout";
import { Wizard, WizardStep } from "@clutch-sh/wizard";
const InstanceIdentifier = ({ resolverType }) => {
    const { onSubmit } = useWizardContext();
    const resolvedResourceData = useDataLayout("resourceData");
    const onResolve = ({ results }) => {
        // Decide how to process results.
        resolvedResourceData.assign(results[0]);
        onSubmit();
    };
    return React.createElement(Resolver, { type: resolverType, searchLimit: 1, onResolve: onResolve });
};
const InstanceDetails = () => {
    const { onSubmit, onBack } = useWizardContext();
    const resourceData = useDataLayout("resourceData");
    const instance = resourceData.displayValue();
    const data = [
        { name: "Instance ID", value: instance.instanceId },
        { name: "Account", value: instance.account },
        { name: "Region", value: instance.region },
        { name: "State", value: instance.state },
        { name: "Instance Type", value: instance.instanceType },
        { name: "Public IP Address", value: instance.publicIpAddress },
        { name: "Private IP Address", value: instance.privateIpAddress },
        { name: "Availability Zone", value: instance.availabilityZone },
    ];
    if (instance.tags) {
        Object.keys(instance.tags).forEach(key => {
            data.push({ name: key, value: instance.tags[key] });
        });
    }
    return (React.createElement(WizardStep, { error: resourceData.error, isLoading: resourceData.isLoading },
        React.createElement(MetadataTable, { data: data }),
        React.createElement(ButtonGroup, null,
            React.createElement(Button, { text: "Back", variant: "neutral", onClick: () => onBack() }),
            React.createElement(Button, { text: "Reboot", variant: "destructive", onClick: onSubmit }))));
};
const Confirm = ({ notes }) => {
    const rebootData = useDataLayout("rebootData");
    return (React.createElement(WizardStep, { error: rebootData.error, isLoading: rebootData.isLoading },
        React.createElement(Confirmation, { action: "Reboot" }),
        React.createElement(NotePanel, { notes: notes })));
};
const RebootInstance = ({ heading, resolverType, notes = [] }) => {
    const dataLayout = {
        resourceData: {},
        rebootData: {
            deps: ["resourceData"],
            hydrator: (resourceData) => {
                return client.post("/v1/aws/ec2/rebootInstance", {
                    instance_id: resourceData.instanceId,
                    account: resourceData.account,
                    region: resourceData.region,
                });
            },
        },
    };
    return (React.createElement(Wizard, { dataLayout: dataLayout, heading: heading },
        React.createElement(InstanceIdentifier, { name: "Lookup", resolverType: resolverType }),
        React.createElement(InstanceDetails, { name: "Verify" }),
        React.createElement(Confirm, { name: "Result", notes: notes })));
};
export default RebootInstance;
