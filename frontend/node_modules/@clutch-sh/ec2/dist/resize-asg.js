import React from "react";
import { Button, ButtonGroup, client, Confirmation, MetadataTable, NotePanel, Resolver, useWizardContext, } from "@clutch-sh/core";
import { useDataLayout } from "@clutch-sh/data-layout";
import { Wizard, WizardStep } from "@clutch-sh/wizard";
import { number, ref } from "yup";
const GroupIdentifier = ({ resolverType }) => {
    const { onSubmit } = useWizardContext();
    const groupData = useDataLayout("groupData");
    const onResolve = ({ results }) => {
        // Decide how to process results.
        groupData.assign(results[0]);
        onSubmit();
    };
    return React.createElement(Resolver, { type: resolverType, searchLimit: 1, onResolve: onResolve });
};
const GroupDetails = () => {
    const { onSubmit, onBack } = useWizardContext();
    const groupData = useDataLayout("groupData");
    const group = groupData.displayValue();
    const update = (key, value) => {
        groupData.updateData(key, value);
    };
    return (React.createElement(WizardStep, { error: groupData.error, isLoading: groupData.isLoading },
        React.createElement("strong", null, "ASG Details"),
        React.createElement(MetadataTable, { onUpdate: update, data: [
                { name: "Name", value: group.name },
                { name: "Account", value: group.account },
                { name: "Region", value: group.region },
                { name: "Termination Policy", value: group.terminationPolicies },
                {
                    name: "Min Size",
                    value: group.size.min,
                    input: {
                        type: "number",
                        key: "size.min",
                        validation: group.size.min > 0 ? number().integer().moreThan(0) : number().integer().min(0),
                    },
                },
                {
                    name: "Max Size",
                    value: group.size.max,
                    input: {
                        type: "number",
                        key: "size.max",
                        validation: group.size.min > 0
                            ? number()
                                .integer()
                                .min(ref("Min Size"))
                            : number().integer().moreThan(0),
                    },
                },
                {
                    name: "Desired Size",
                    value: group.size.desired,
                    input: {
                        type: "number",
                        key: "size.desired",
                        validation: number()
                            .integer()
                            .min(ref("Min Size"))
                            .max(ref("Max Size")),
                    },
                },
                { name: "Availability Zone", value: group.zones },
            ] }),
        React.createElement(ButtonGroup, null,
            React.createElement(Button, { text: "Back", variant: "neutral", onClick: () => onBack() }),
            React.createElement(Button, { text: "Resize", variant: "destructive", onClick: onSubmit }))));
};
// TODO (sperry): possibly show the previous size values
const Confirm = ({ notes }) => {
    const group = useDataLayout("groupData").displayValue();
    const resizeData = useDataLayout("resizeData");
    return (React.createElement(WizardStep, { error: resizeData.error, isLoading: resizeData.isLoading },
        React.createElement(Confirmation, { action: "Resize" }),
        React.createElement(MetadataTable, { data: [
                { name: "Name", value: group.name },
                { name: "New Min Size", value: group.size.min },
                { name: "New Max Size", value: group.size.max },
                { name: "New Desired Size", value: group.size.desired },
            ] }),
        React.createElement(NotePanel, { notes: notes })));
};
const ResizeAutoscalingGroup = ({ heading, resolverType, notes = [] }) => {
    const dataLayout = {
        groupData: {},
        resizeData: {
            deps: ["groupData"],
            hydrator: (groupData) => {
                return client.post("/v1/aws/ec2/resizeAutoscalingGroup", {
                    name: groupData.name,
                    account: groupData.account,
                    region: groupData.region,
                    size: groupData.size,
                });
            },
        },
    };
    return (React.createElement(Wizard, { dataLayout: dataLayout, heading: heading },
        React.createElement(GroupIdentifier, { name: "Lookup", resolverType: resolverType }),
        React.createElement(GroupDetails, { name: "Modify" }),
        React.createElement(Confirm, { name: "Result", notes: notes })));
};
export default ResizeAutoscalingGroup;
