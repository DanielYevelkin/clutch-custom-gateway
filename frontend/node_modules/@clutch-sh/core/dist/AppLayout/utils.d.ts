import type { WorkflowIcon } from "../AppProvider";
import type { Workflow } from "../AppProvider/workflow";
interface GroupedRoutes {
    [category: string]: {
        icon?: WorkflowIcon;
        workflows: {
            displayName: string;
            path: string;
            trending: boolean;
        }[];
    };
}
interface TrendingWorkflow {
    displayName: string;
    group: string;
    description: string;
    path: string;
    icon: string;
}
declare const workflowsByTrending: (workflows: Workflow[]) => TrendingWorkflow[];
declare const routesByGrouping: (workflows: Workflow[]) => GroupedRoutes;
/**
 * Will break a path down and iterate through given workflows to see if there is a matching path.
 */
declare const workflowByRoute: (workflows: Workflow[], route: string) => Workflow;
declare const sortedGroupings: (workflows: Workflow[]) => string[];
export interface SearchIndex {
    category: string;
    label: string;
    path: string;
}
declare const searchIndexes: (workflows: Workflow[]) => SearchIndex[];
/** Filter out all of the workflows that are configured to be `hideNav: true`.
 * This prevents the workflows from being discoverable by the user from the UI where used.
 * Some example usages are in the search and drawer navigation components.
 *
 * The routes for all configured workflows will still be reachable
 * by manually providing the full path in the URI.
 */
declare const filterHiddenRoutes: (workflows: Workflow[]) => Workflow[];
export { filterHiddenRoutes, routesByGrouping, searchIndexes, sortedGroupings, workflowByRoute, workflowsByTrending, };
