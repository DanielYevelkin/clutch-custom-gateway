import React from "react";
import _ from "lodash";
import { Select, TextField } from "../Input";
const convertChangeEvent = (event) => {
    return {
        target: {
            name: event.target.name,
            value: event.target.value,
        },
    };
};
const StringField = (field, onChange, validation) => {
    var _a, _b, _c, _d, _e, _f;
    const { metadata: { displayName, stringField, required }, name, } = field;
    const errorMsg = ((_c = (_b = (_a = validation === null || validation === void 0 ? void 0 : validation.formState) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[name]) === null || _c === void 0 ? void 0 : _c.message) ||
        ((_f = (_e = (_d = validation === null || validation === void 0 ? void 0 : validation.formState) === null || _d === void 0 ? void 0 : _d.errors) === null || _e === void 0 ? void 0 : _e[name]) === null || _f === void 0 ? void 0 : _f.type) ||
        "";
    const handleChanges = (event) => {
        onChange(convertChangeEvent(event));
    };
    return (React.createElement(TextField, { key: displayName || name, placeholder: stringField.placeholder, defaultValue: stringField.defaultValue || null, required: required || false, name: name, label: displayName || name, formRegistration: validation.register, helperText: errorMsg, error: !!errorMsg, onChange: handleChanges, onKeyDown: handleChanges, onFocus: handleChanges }));
};
const OptionField = (field, onChange) => {
    const { metadata: { displayName, optionField }, name, } = field;
    const sortedOptions = _.sortBy(optionField.options, o => o.displayName);
    React.useEffect(() => {
        var _a;
        onChange({
            target: {
                name,
                value: (_a = sortedOptions === null || sortedOptions === void 0 ? void 0 : sortedOptions[0]) === null || _a === void 0 ? void 0 : _a.stringValue,
            },
            initialLoad: true,
        });
    }, []);
    const options = sortedOptions.map(option => {
        return { label: option.displayName, value: option.stringValue };
    });
    const updateSelectedOption = (value) => {
        onChange({
            target: {
                name,
                value,
            },
        });
    };
    return (React.createElement(Select, { key: displayName, label: displayName, onChange: updateSelectedOption, name: name, options: options }));
};
const FIELD_TYPES = {
    stringField: StringField,
    optionField: OptionField,
};
const hydrateField = (field, onChange, validation) => {
    let component;
    Object.keys(FIELD_TYPES).some(type => {
        if (Object.keys(field.metadata).includes(type)) {
            component = FIELD_TYPES[type];
            return true;
        }
        return false;
    });
    return component(field, onChange, validation);
};
export { convertChangeEvent, hydrateField };
