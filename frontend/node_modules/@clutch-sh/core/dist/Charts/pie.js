import React, { PureComponent } from "react";
import { Cell, Label, Legend, Pie, PieChart as RechartsPieChart, ResponsiveContainer, Sector, Tooltip, } from "recharts";
const DEFAULT_COLORS = [
    "#3548D4",
    "#40A05A",
    "#B09027",
    "#D87313",
    "#C2302E",
    "#0D1030",
    "#8884D8",
];
const renderActiveShape = (props, options) => {
    const RADIAN = Math.PI / 180;
    const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle, fill, payload, percent, value, } = props;
    const sin = Math.sin(-RADIAN * midAngle);
    const cos = Math.cos(-RADIAN * midAngle);
    const sx = cx + (outerRadius + 10) * cos;
    const sy = cy + (outerRadius + 10) * sin;
    const mx = cx + (outerRadius + 30) * cos;
    const my = cy + (outerRadius + 30) * sin;
    const ex = mx + (cos >= 0 ? 1 : -1) * 22;
    const ey = my;
    const textAnchor = cos >= 0 ? "start" : "end";
    return (React.createElement("g", null,
        (options.formatter || options.staticLabel || options.payloadLabel) && (React.createElement("text", { x: cx, y: cy, dy: 8, textAnchor: "middle" },
            options.formatter && options.formatter(payload),
            options.staticLabel && options.staticLabel,
            options.payloadLabel && `${options.payloadLabel} ${payload.name}`)),
        React.createElement(Sector, { cx: cx, cy: cy, innerRadius: innerRadius, outerRadius: outerRadius, startAngle: startAngle, endAngle: endAngle, fill: fill }),
        React.createElement(Sector, { cx: cx, cy: cy, startAngle: startAngle, endAngle: endAngle, innerRadius: outerRadius + 6, outerRadius: outerRadius + 10, fill: fill }),
        React.createElement("path", { d: `M${sx},${sy}L${mx},${my}L${ex},${ey}`, stroke: fill, fill: "none" }),
        React.createElement("circle", { cx: ex, cy: ey, r: 2, fill: fill, stroke: "none" }),
        React.createElement("text", { x: ex + (cos >= 0 ? 1 : -1) * 12, y: ey, textAnchor: textAnchor, fill: "#333" }, payload.name),
        React.createElement("text", { x: ex + (cos >= 0 ? 1 : -1) * 12, y: ey, dy: 18, textAnchor: textAnchor, fill: "#999" }, `${value} (${(percent * 100).toFixed(2)}%)`)));
};
const CenterLabel = props => {
    const { options, viewBox } = props;
    const { cx, cy, fill } = viewBox;
    if (!options) {
        return null;
    }
    return (React.createElement("g", null,
        options.title && (React.createElement("text", { x: cx, y: cy, textAnchor: "middle", fill: fill, style: { fontSize: "36px" } }, options.title)),
        options.subtitle && (React.createElement("text", { x: cx, y: cy, dy: 28, textAnchor: "middle", fill: fill, style: { fontSize: "14px" } }, options.subtitle))));
};
class PieChart extends PureComponent {
    constructor(props) {
        super(props);
        this.onPieEnter = (_, activeIndex) => {
            this.setState({ activeIndex });
        };
        this.state = { activeIndex: 0 };
    }
    render() {
        var _a;
        const { children, centerLabel, data, dimensions, activeTooltip, label, labelLine, legend = false, responsive = true, tooltip, } = this.props;
        const chartOptions = {
            activeTooltip: typeof activeTooltip === "boolean" ? activeTooltip : true,
            activeTooltipOptions: typeof activeTooltip !== "boolean" ? { ...activeTooltip } : {},
            responsive: typeof responsive === "boolean" ? responsive : true,
            responsiveDimensions: {
                width: "99%",
                height: "99%",
                aspect: 2,
                ...(typeof responsive !== "boolean" ? responsive : {}),
            },
            centerLabel,
            label,
            labelLine,
            legend,
            tooltip,
            dimensions: {
                height: 275,
                width: 275,
                innerRadius: 60,
                outerRadius: 80,
                paddingAngle: 2,
                cx: "50%",
                cy: "50%",
                ...(dimensions || {}),
            },
        };
        const additionalProps = {
            ...(chartOptions.activeTooltip
                ? {
                    // eslint-disable-next-line react/destructuring-assignment
                    activeIndex: (_a = this.state) === null || _a === void 0 ? void 0 : _a.activeIndex,
                    activeShape: props => renderActiveShape(props, { ...chartOptions.activeTooltipOptions }),
                }
                : {}),
            ...(chartOptions.label
                ? {
                    label: chartOptions.label,
                    labelLine: chartOptions.labelLine,
                }
                : {}),
        };
        const chart = (React.createElement(RechartsPieChart, { height: chartOptions.dimensions.height, width: chartOptions.dimensions.width },
            React.createElement(Pie, Object.assign({ data: data, fill: DEFAULT_COLORS[0], dataKey: "value", onMouseEnter: this.onPieEnter }, chartOptions.dimensions, additionalProps),
                data.map((entry, index) => {
                    var _a;
                    return (React.createElement(Cell
                    // eslint-disable-next-line react/no-array-index-key
                    , { 
                        // eslint-disable-next-line react/no-array-index-key
                        key: `cell-${index}`, fill: (_a = entry.color) !== null && _a !== void 0 ? _a : DEFAULT_COLORS[index % DEFAULT_COLORS.length] }));
                }),
                centerLabel && React.createElement(Label, { content: React.createElement(CenterLabel, { options: centerLabel }) })),
            children && children,
            chartOptions.legend && (React.createElement(Legend, { layout: "vertical", align: "right", verticalAlign: "top", iconType: "plainline" })),
            chartOptions.tooltip && React.createElement(Tooltip, null)));
        return chartOptions.responsive ? (React.createElement(ResponsiveContainer, Object.assign({}, chartOptions.responsiveDimensions), chart)) : (chart);
    }
}
export { PieChart };
