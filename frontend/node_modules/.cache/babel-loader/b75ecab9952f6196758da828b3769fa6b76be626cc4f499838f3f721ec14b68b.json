{"ast":null,"code":"import _objectWithoutProperties from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectDestructuringEmpty from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nvar _excluded = [\"type\"];\nimport React from \"react\";\nimport HappyEmoji from \"./happy\";\nimport NeutralEmoji from \"./neutral\";\nimport SadEmoji from \"./sad\";\nvar EmojiTypes = {\n  HAPPY: function HAPPY(_ref) {\n    var props = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n    return React.createElement(HappyEmoji, Object.assign({}, props));\n  },\n  NEUTRAL: function NEUTRAL(_ref2) {\n    var props = Object.assign({}, (_objectDestructuringEmpty(_ref2), _ref2));\n    return React.createElement(NeutralEmoji, Object.assign({}, props));\n  },\n  SAD: function SAD(_ref3) {\n    var props = Object.assign({}, (_objectDestructuringEmpty(_ref3), _ref3));\n    return React.createElement(SadEmoji, Object.assign({}, props));\n  }\n};\n/**\n * Shorthand component to return an Emoji based on a given input type\n *\n * @param type the given type of emoji to return from EmojiType\n * @returns the given emoji extended with any additional properties passed in\n */\nvar Emoji = function Emoji(_ref4) {\n  var type = _ref4.type,\n    props = _objectWithoutProperties(_ref4, _excluded);\n  return EmojiTypes[type](props);\n};\nexport default Emoji;\nexport { HappyEmoji, NeutralEmoji, SadEmoji };","map":{"version":3,"names":["React","HappyEmoji","NeutralEmoji","SadEmoji","EmojiTypes","HAPPY","_ref","props","Object","assign","_objectDestructuringEmpty","createElement","NEUTRAL","_ref2","SAD","_ref3","Emoji","_ref4","type","_objectWithoutProperties","_excluded"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/core/dist/Assets/emojis/index.js"],"sourcesContent":["import React from \"react\";\nimport HappyEmoji from \"./happy\";\nimport NeutralEmoji from \"./neutral\";\nimport SadEmoji from \"./sad\";\nconst EmojiTypes = {\n    HAPPY: ({ ...props }) => React.createElement(HappyEmoji, Object.assign({}, props)),\n    NEUTRAL: ({ ...props }) => React.createElement(NeutralEmoji, Object.assign({}, props)),\n    SAD: ({ ...props }) => React.createElement(SadEmoji, Object.assign({}, props)),\n};\n/**\n * Shorthand component to return an Emoji based on a given input type\n *\n * @param type the given type of emoji to return from EmojiType\n * @returns the given emoji extended with any additional properties passed in\n */\nconst Emoji = ({ type, ...props }) => EmojiTypes[type](props);\nexport default Emoji;\nexport { HappyEmoji, NeutralEmoji, SadEmoji };\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,SAAS;AAChC,OAAOC,YAAY,MAAM,WAAW;AACpC,OAAOC,QAAQ,MAAM,OAAO;AAC5B,IAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,SAAAA,MAAAC,IAAA;IAAA,IAAMC,KAAK,GAAAC,MAAA,CAAAC,MAAA,MAAAC,yBAAA,CAAAJ,IAAA,GAAAA,IAAA;IAAA,OAAON,KAAK,CAACW,aAAa,CAACV,UAAU,EAAEO,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC;EAAA;EAClFK,OAAO,EAAE,SAAAA,QAAAC,KAAA;IAAA,IAAMN,KAAK,GAAAC,MAAA,CAAAC,MAAA,MAAAC,yBAAA,CAAAG,KAAA,GAAAA,KAAA;IAAA,OAAOb,KAAK,CAACW,aAAa,CAACT,YAAY,EAAEM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC;EAAA;EACtFO,GAAG,EAAE,SAAAA,IAAAC,KAAA;IAAA,IAAMR,KAAK,GAAAC,MAAA,CAAAC,MAAA,MAAAC,yBAAA,CAAAK,KAAA,GAAAA,KAAA;IAAA,OAAOf,KAAK,CAACW,aAAa,CAACR,QAAQ,EAAEK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC;EAAA;AAClF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAMS,KAAK,GAAG,SAARA,KAAKA,CAAAC,KAAA;EAAA,IAAMC,IAAI,GAAAD,KAAA,CAAJC,IAAI;IAAKX,KAAK,GAAAY,wBAAA,CAAAF,KAAA,EAAAG,SAAA;EAAA,OAAOhB,UAAU,CAACc,IAAI,CAAC,CAACX,KAAK,CAAC;AAAA;AAC7D,eAAeS,KAAK;AACpB,SAASf,UAAU,EAAEC,YAAY,EAAEC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}