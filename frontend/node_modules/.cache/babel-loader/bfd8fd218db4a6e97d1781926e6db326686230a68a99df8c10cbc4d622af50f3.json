{"ast":null,"code":"import _slicedToArray from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport _ from \"lodash\";\nimport { AccordionGroup } from \"../accordion\";\nimport { useWizardContext } from \"../Contexts\";\nimport { Error, NotePanel } from \"../Feedback\";\nimport { HorizontalRule } from \"../horizontal-rule\";\nimport Loadable from \"../loading\";\nimport { useSearchParams } from \"../navigation\";\nimport { fetchResourceSchemas, resolveResource } from \"./fetch\";\nimport { QueryResolver, SchemaResolver } from \"./input\";\nimport { ResolverAction, useResolverState } from \"./state\";\nvar SchemaLabel = styled.div({\n  alignSelf: \"flex-start\",\n  fontSize: \"20px\",\n  fontWeight: 700,\n  marginBottom: \"8px\"\n});\nvar loadSchemas = function loadSchemas(type, dispatch) {\n  fetchResourceSchemas(type).then(function (schemas) {\n    if (schemas.length === 0) {\n      dispatch({\n        type: ResolverAction.SCHEMAS_ERROR,\n        error: {\n          message: \"No schemas found for type '\".concat(type, \"'\"),\n          status: {\n            code: 404,\n            text: \"Not Found\"\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: ResolverAction.SCHEMAS_SUCCCESS,\n        allSchemas: schemas\n      });\n    }\n  }).catch(function (err) {\n    dispatch({\n      type: ResolverAction.SCHEMAS_ERROR,\n      error: err\n    });\n  });\n};\nvar Resolver = function Resolver(_ref) {\n  var type = _ref.type,\n    searchLimit = _ref.searchLimit,\n    onResolve = _ref.onResolve,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? \"dual\" : _ref$variant,\n    apiPackage = _ref.apiPackage,\n    _ref$enableAutocomple = _ref.enableAutocomplete,\n    enableAutocomplete = _ref$enableAutocomple === void 0 ? true : _ref$enableAutocomple,\n    _ref$notes = _ref.notes,\n    notes = _ref$notes === void 0 ? [] : _ref$notes;\n  var _useResolverState = useResolverState(),\n    _useResolverState2 = _slicedToArray(_useResolverState, 2),\n    state = _useResolverState2[0],\n    dispatch = _useResolverState2[1];\n  var _useWizardContext = useWizardContext(),\n    displayWarnings = _useWizardContext.displayWarnings;\n  React.useEffect(function () {\n    return loadSchemas(type, dispatch);\n  }, []);\n  var _submitHandler = function submitHandler(data) {\n    // Move to loading state.\n    dispatch({\n      type: ResolverAction.RESOLVING\n    });\n    // Copy incoming data, trimming whitespace from any string values (usually artifact of cut and paste into tool).\n    var inputData = _.mapValues(data, function (v) {\n      return _.isString(v) && _.trim(v) || v;\n    });\n    // Resolve!\n    resolveResource(type, searchLimit, inputData, function (results, partialFailures) {\n      onResolve({\n        results: results,\n        input: inputData\n      });\n      if (!_.isEmpty(partialFailures)) {\n        displayWarnings(partialFailures);\n      }\n      dispatch({\n        type: ResolverAction.RESOLVE_SUCCESS\n      });\n    }, function (err) {\n      return dispatch({\n        type: ResolverAction.RESOLVE_ERROR,\n        error: err\n      });\n    }, apiPackage);\n  };\n  var _useSearchParams = useSearchParams(),\n    _useSearchParams2 = _slicedToArray(_useSearchParams, 2),\n    searchParams = _useSearchParams2[0],\n    setSearchParams = _useSearchParams2[1];\n  React.useEffect(function () {\n    if (searchParams.get(\"q\")) {\n      _submitHandler({\n        query: searchParams.get(\"q\")\n      });\n    }\n  }, []);\n  return React.createElement(Loadable, {\n    isLoading: state.schemasLoading\n  }, state.schemaFetchError ? React.createElement(Error, {\n    subject: state.schemaFetchError,\n    onRetry: function onRetry() {\n      return loadSchemas(type, dispatch);\n    }\n  }) : React.createElement(Loadable, {\n    variant: \"overlay\",\n    isLoading: state.resolverLoading\n  }, state.resolverFetchError && React.createElement(Error, {\n    subject: state.resolverFetchError\n  }), React.createElement(NotePanel, {\n    notes: notes\n  }), (variant === \"dual\" || variant === \"query\") && React.createElement(React.Fragment, null, React.createElement(SchemaLabel, null, \"Search\"), React.createElement(QueryResolver, {\n    inputType: type,\n    schemas: state.searchableSchemas,\n    submitHandler: function submitHandler(data) {\n      setSearchParams({\n        q: data.query\n      });\n      _submitHandler(data);\n    },\n    enableAutocomplete: enableAutocomplete\n  })), variant === \"dual\" && React.createElement(HorizontalRule, null, \"OR\"), React.createElement(SchemaLabel, null, \"Advanced Search\"), React.createElement(AccordionGroup, {\n    defaultExpandedIdx: 0\n  }, state.allSchemas.map(function (schema) {\n    return React.createElement(SchemaResolver, {\n      key: schema.typeUrl,\n      schema: schema,\n      submitHandler: _submitHandler\n    });\n  }))));\n};\nexport default Resolver;","map":{"version":3,"names":["React","styled","_","AccordionGroup","useWizardContext","Error","NotePanel","HorizontalRule","Loadable","useSearchParams","fetchResourceSchemas","resolveResource","QueryResolver","SchemaResolver","ResolverAction","useResolverState","SchemaLabel","div","alignSelf","fontSize","fontWeight","marginBottom","loadSchemas","type","dispatch","then","schemas","length","SCHEMAS_ERROR","error","message","concat","status","code","text","SCHEMAS_SUCCCESS","allSchemas","catch","err","Resolver","_ref","searchLimit","onResolve","_ref$variant","variant","apiPackage","_ref$enableAutocomple","enableAutocomplete","_ref$notes","notes","_useResolverState","_useResolverState2","_slicedToArray","state","_useWizardContext","displayWarnings","useEffect","submitHandler","data","RESOLVING","inputData","mapValues","v","isString","trim","results","partialFailures","input","isEmpty","RESOLVE_SUCCESS","RESOLVE_ERROR","_useSearchParams","_useSearchParams2","searchParams","setSearchParams","get","query","createElement","isLoading","schemasLoading","schemaFetchError","subject","onRetry","resolverLoading","resolverFetchError","Fragment","inputType","searchableSchemas","q","defaultExpandedIdx","map","schema","key","typeUrl"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/core/dist/Resolver/index.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport _ from \"lodash\";\nimport { AccordionGroup } from \"../accordion\";\nimport { useWizardContext } from \"../Contexts\";\nimport { Error, NotePanel } from \"../Feedback\";\nimport { HorizontalRule } from \"../horizontal-rule\";\nimport Loadable from \"../loading\";\nimport { useSearchParams } from \"../navigation\";\nimport { fetchResourceSchemas, resolveResource } from \"./fetch\";\nimport { QueryResolver, SchemaResolver } from \"./input\";\nimport { ResolverAction, useResolverState } from \"./state\";\nconst SchemaLabel = styled.div({\n    alignSelf: \"flex-start\",\n    fontSize: \"20px\",\n    fontWeight: 700,\n    marginBottom: \"8px\",\n});\nconst loadSchemas = (type, dispatch) => {\n    fetchResourceSchemas(type)\n        .then(schemas => {\n        if (schemas.length === 0) {\n            dispatch({\n                type: ResolverAction.SCHEMAS_ERROR,\n                error: {\n                    message: `No schemas found for type '${type}'`,\n                    status: {\n                        code: 404,\n                        text: \"Not Found\",\n                    },\n                },\n            });\n        }\n        else {\n            dispatch({ type: ResolverAction.SCHEMAS_SUCCCESS, allSchemas: schemas });\n        }\n    })\n        .catch(err => {\n        dispatch({ type: ResolverAction.SCHEMAS_ERROR, error: err });\n    });\n};\nconst Resolver = ({ type, searchLimit, onResolve, variant = \"dual\", apiPackage, enableAutocomplete = true, notes = [], }) => {\n    const [state, dispatch] = useResolverState();\n    const { displayWarnings } = useWizardContext();\n    React.useEffect(() => loadSchemas(type, dispatch), []);\n    const submitHandler = data => {\n        // Move to loading state.\n        dispatch({ type: ResolverAction.RESOLVING });\n        // Copy incoming data, trimming whitespace from any string values (usually artifact of cut and paste into tool).\n        const inputData = _.mapValues(data, v => (_.isString(v) && _.trim(v)) || v);\n        // Resolve!\n        resolveResource(type, searchLimit, inputData, (results, partialFailures) => {\n            onResolve({ results, input: inputData });\n            if (!_.isEmpty(partialFailures)) {\n                displayWarnings(partialFailures);\n            }\n            dispatch({ type: ResolverAction.RESOLVE_SUCCESS });\n        }, err => dispatch({ type: ResolverAction.RESOLVE_ERROR, error: err }), apiPackage);\n    };\n    const [searchParams, setSearchParams] = useSearchParams();\n    React.useEffect(() => {\n        if (searchParams.get(\"q\")) {\n            submitHandler({ query: searchParams.get(\"q\") });\n        }\n    }, []);\n    return (React.createElement(Loadable, { isLoading: state.schemasLoading }, state.schemaFetchError ? (React.createElement(Error, { subject: state.schemaFetchError, onRetry: () => loadSchemas(type, dispatch) })) : (React.createElement(Loadable, { variant: \"overlay\", isLoading: state.resolverLoading },\n        state.resolverFetchError && React.createElement(Error, { subject: state.resolverFetchError }),\n        React.createElement(NotePanel, { notes: notes }),\n        (variant === \"dual\" || variant === \"query\") && (React.createElement(React.Fragment, null,\n            React.createElement(SchemaLabel, null, \"Search\"),\n            React.createElement(QueryResolver, { inputType: type, schemas: state.searchableSchemas, submitHandler: data => {\n                    setSearchParams({ q: data.query });\n                    submitHandler(data);\n                }, enableAutocomplete: enableAutocomplete }))),\n        variant === \"dual\" && React.createElement(HorizontalRule, null, \"OR\"),\n        React.createElement(SchemaLabel, null, \"Advanced Search\"),\n        React.createElement(AccordionGroup, { defaultExpandedIdx: 0 }, state.allSchemas.map(schema => (React.createElement(SchemaResolver, { key: schema.typeUrl, schema: schema, submitHandler: submitHandler }))))))));\n};\nexport default Resolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}