{"ast":null,"code":"import _regeneratorRuntime from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _ from \"lodash\";\nvar workflowRoutes = function workflowRoutes(workflowId, workflow, configuration) {\n  var workflowConfig = (configuration === null || configuration === void 0 ? void 0 : configuration[workflowId]) || {};\n  var allRoutes = Object.keys(workflowConfig).map(function (key) {\n    // if workflow contains an icon, return an empty object\n    if (key === \"icon\") {\n      return {};\n      // if workflow does not contain route with user-specified key return an empty object\n    }\n\n    if (workflow.routes[key] === undefined) {\n      /* eslint-disable-next-line no-console */\n      console.warn(\"[\".concat(workflowId, \"][\").concat(key, \"] Not registered: Invalid config - route does not exist. Valid routes: \").concat(Object.keys(workflow.routes)));\n      return {};\n    }\n    return _objectSpread(_objectSpread({}, workflow.routes[key]), workflowConfig[key]);\n  });\n  // filter out routes that are empty\n  _.remove(allRoutes, function (r) {\n    return !!_.isEmpty(r);\n  });\n  var validRoutes = allRoutes.filter(function (route) {\n    var requiredRouteProps = (route === null || route === void 0 ? void 0 : route.requiredConfigProps) || [];\n    var missingProps = requiredRouteProps.filter(function (prop) {\n      var _a;\n      return ((_a = route.componentProps) === null || _a === void 0 ? void 0 : _a[prop]) === undefined;\n    });\n    var isValidRoute = missingProps.length === 0;\n    if (!isValidRoute) {\n      /* eslint-disable-next-line no-console */\n      console.warn(\"[\".concat(workflowId, \"][\").concat(route.path, \"] Not registered: Invalid config - missing required component props \").concat(missingProps));\n    }\n    return isValidRoute;\n  });\n  // eslint-disable-next-line\n  validRoutes.map(function (r) {\n    return r.path = r.path.replace(/^\\/+/, \"\").replace(/\\/+$/, \"\");\n  });\n  return validRoutes;\n};\n/**\n * Determine all user registered workflows on the application and apply filters, if any.\n * @param workflows a map of workflow keys to functions that return their configuration.\n * @param configuration the user configuration, usually read in from the clutch.config.js file.\n * @param filters a list of filters to apply to the user registered workflows.\n * @returns\n */\nvar registeredWorkflows = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(workflows, configuration) {\n    var filters,\n      validWorkflows,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          filters = _args.length > 2 && _args[2] !== undefined ? _args[2] : [];\n          validWorkflows = Object.keys(workflows || []).map(function (workflowId) {\n            var _a;\n            var workflow = workflows[workflowId]();\n            var icon = ((_a = configuration === null || configuration === void 0 ? void 0 : configuration[workflowId]) === null || _a === void 0 ? void 0 : _a.icon) || {\n              path: \"\"\n            };\n            try {\n              return _objectSpread(_objectSpread({}, workflow), {}, {\n                icon: icon,\n                routes: workflowRoutes(workflowId, workflow, configuration)\n              });\n            } catch (_b) {\n              // n.b. if the routes aren't configured properly we drop the workflow\n              /* eslint-disable-next-line no-console */\n              console.warn(\"Skipping registration of \".concat(workflowId || \"unknown\", \" workflow due to invalid config\"));\n              return null;\n            }\n          }).filter(function (workflow) {\n            return workflow !== null;\n          });\n          filters.forEach(function (f) {\n            f(validWorkflows).then(function (w) {\n              validWorkflows = w;\n            });\n          });\n          return _context.abrupt(\"return\", validWorkflows);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function registeredWorkflows(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { registeredWorkflows, workflowRoutes };","map":{"version":3,"names":["_","workflowRoutes","workflowId","workflow","configuration","workflowConfig","allRoutes","Object","keys","map","key","routes","undefined","console","warn","concat","_objectSpread","remove","r","isEmpty","validRoutes","filter","route","requiredRouteProps","requiredConfigProps","missingProps","prop","_a","componentProps","isValidRoute","length","path","replace","registeredWorkflows","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","workflows","filters","validWorkflows","_args","arguments","wrap","_callee$","_context","prev","next","icon","_b","forEach","f","then","w","abrupt","stop","_x","_x2","apply"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/core/dist/AppProvider/registrar.js"],"sourcesContent":["import _ from \"lodash\";\nconst workflowRoutes = (workflowId, workflow, configuration) => {\n    const workflowConfig = (configuration === null || configuration === void 0 ? void 0 : configuration[workflowId]) || {};\n    const allRoutes = Object.keys(workflowConfig).map(key => {\n        // if workflow contains an icon, return an empty object\n        if (key === \"icon\") {\n            return {};\n            // if workflow does not contain route with user-specified key return an empty object\n        }\n        if (workflow.routes[key] === undefined) {\n            /* eslint-disable-next-line no-console */\n            console.warn(`[${workflowId}][${key}] Not registered: Invalid config - route does not exist. Valid routes: ${Object.keys(workflow.routes)}`);\n            return {};\n        }\n        return {\n            ...workflow.routes[key],\n            ...workflowConfig[key],\n        };\n    });\n    // filter out routes that are empty\n    _.remove(allRoutes, r => !!_.isEmpty(r));\n    const validRoutes = allRoutes.filter(route => {\n        const requiredRouteProps = (route === null || route === void 0 ? void 0 : route.requiredConfigProps) || [];\n        const missingProps = requiredRouteProps.filter((prop) => {\n            var _a;\n            return ((_a = route.componentProps) === null || _a === void 0 ? void 0 : _a[prop]) === undefined;\n        });\n        const isValidRoute = missingProps.length === 0;\n        if (!isValidRoute) {\n            /* eslint-disable-next-line no-console */\n            console.warn(`[${workflowId}][${route.path}] Not registered: Invalid config - missing required component props ${missingProps}`);\n        }\n        return isValidRoute;\n    });\n    // eslint-disable-next-line\n    validRoutes.map(r => (r.path = r.path.replace(/^\\/+/, \"\").replace(/\\/+$/, \"\")));\n    return validRoutes;\n};\n/**\n * Determine all user registered workflows on the application and apply filters, if any.\n * @param workflows a map of workflow keys to functions that return their configuration.\n * @param configuration the user configuration, usually read in from the clutch.config.js file.\n * @param filters a list of filters to apply to the user registered workflows.\n * @returns\n */\nconst registeredWorkflows = async (workflows, configuration, filters = []) => {\n    let validWorkflows = Object.keys(workflows || [])\n        .map((workflowId) => {\n        var _a;\n        const workflow = workflows[workflowId]();\n        const icon = ((_a = configuration === null || configuration === void 0 ? void 0 : configuration[workflowId]) === null || _a === void 0 ? void 0 : _a.icon) || { path: \"\" };\n        try {\n            return {\n                ...workflow,\n                icon,\n                routes: workflowRoutes(workflowId, workflow, configuration),\n            };\n        }\n        catch (_b) {\n            // n.b. if the routes aren't configured properly we drop the workflow\n            /* eslint-disable-next-line no-console */\n            console.warn(`Skipping registration of ${workflowId || \"unknown\"} workflow due to invalid config`);\n            return null;\n        }\n    })\n        .filter(workflow => workflow !== null);\n    filters.forEach(f => {\n        f(validWorkflows).then(w => {\n            validWorkflows = w;\n        });\n    });\n    return validWorkflows;\n};\nexport { registeredWorkflows, workflowRoutes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}