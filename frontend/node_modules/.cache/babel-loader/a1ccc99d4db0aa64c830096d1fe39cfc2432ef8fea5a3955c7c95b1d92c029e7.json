{"ast":null,"code":"import React from \"react\";\nimport { Button, ButtonGroup, client, Confirmation, MetadataTable, NotePanel, Resolver, useWizardContext } from \"@clutch-sh/core\";\nimport { useDataLayout } from \"@clutch-sh/data-layout\";\nimport { Wizard, WizardStep } from \"@clutch-sh/wizard\";\nvar InstanceIdentifier = function InstanceIdentifier(_ref) {\n  var resolverType = _ref.resolverType;\n  var _useWizardContext = useWizardContext(),\n    onSubmit = _useWizardContext.onSubmit;\n  var resolvedResourceData = useDataLayout(\"resourceData\");\n  var onResolve = function onResolve(_ref2) {\n    var results = _ref2.results;\n    // Decide how to process results.\n    resolvedResourceData.assign(results[0]);\n    onSubmit();\n  };\n  return React.createElement(Resolver, {\n    type: resolverType,\n    searchLimit: 1,\n    onResolve: onResolve\n  });\n};\nvar InstanceDetails = function InstanceDetails() {\n  var _useWizardContext2 = useWizardContext(),\n    onSubmit = _useWizardContext2.onSubmit,\n    onBack = _useWizardContext2.onBack;\n  var resourceData = useDataLayout(\"resourceData\");\n  var instance = resourceData.displayValue();\n  var data = [{\n    name: \"Instance ID\",\n    value: instance.instanceId\n  }, {\n    name: \"Account\",\n    value: instance.account\n  }, {\n    name: \"Region\",\n    value: instance.region\n  }, {\n    name: \"State\",\n    value: instance.state\n  }, {\n    name: \"Instance Type\",\n    value: instance.instanceType\n  }, {\n    name: \"Public IP Address\",\n    value: instance.publicIpAddress\n  }, {\n    name: \"Private IP Address\",\n    value: instance.privateIpAddress\n  }, {\n    name: \"Availability Zone\",\n    value: instance.availabilityZone\n  }];\n  if (instance.tags) {\n    Object.keys(instance.tags).forEach(function (key) {\n      data.push({\n        name: key,\n        value: instance.tags[key]\n      });\n    });\n  }\n  return React.createElement(WizardStep, {\n    error: resourceData.error,\n    isLoading: resourceData.isLoading\n  }, React.createElement(MetadataTable, {\n    data: data\n  }), React.createElement(ButtonGroup, null, React.createElement(Button, {\n    text: \"Back\",\n    variant: \"neutral\",\n    onClick: function onClick() {\n      return onBack();\n    }\n  }), React.createElement(Button, {\n    text: \"Reboot\",\n    variant: \"destructive\",\n    onClick: onSubmit\n  })));\n};\nvar Confirm = function Confirm(_ref3) {\n  var notes = _ref3.notes;\n  var rebootData = useDataLayout(\"rebootData\");\n  return React.createElement(WizardStep, {\n    error: rebootData.error,\n    isLoading: rebootData.isLoading\n  }, React.createElement(Confirmation, {\n    action: \"Reboot\"\n  }), React.createElement(NotePanel, {\n    notes: notes\n  }));\n};\nvar RebootInstance = function RebootInstance(_ref4) {\n  var heading = _ref4.heading,\n    resolverType = _ref4.resolverType,\n    _ref4$notes = _ref4.notes,\n    notes = _ref4$notes === void 0 ? [] : _ref4$notes;\n  var dataLayout = {\n    resourceData: {},\n    rebootData: {\n      deps: [\"resourceData\"],\n      hydrator: function hydrator(resourceData) {\n        return client.post(\"/v1/aws/ec2/rebootInstance\", {\n          instance_id: resourceData.instanceId,\n          account: resourceData.account,\n          region: resourceData.region\n        });\n      }\n    }\n  };\n  return React.createElement(Wizard, {\n    dataLayout: dataLayout,\n    heading: heading\n  }, React.createElement(InstanceIdentifier, {\n    name: \"Lookup\",\n    resolverType: resolverType\n  }), React.createElement(InstanceDetails, {\n    name: \"Verify\"\n  }), React.createElement(Confirm, {\n    name: \"Result\",\n    notes: notes\n  }));\n};\nexport default RebootInstance;","map":{"version":3,"names":["React","Button","ButtonGroup","client","Confirmation","MetadataTable","NotePanel","Resolver","useWizardContext","useDataLayout","Wizard","WizardStep","InstanceIdentifier","_ref","resolverType","_useWizardContext","onSubmit","resolvedResourceData","onResolve","_ref2","results","assign","createElement","type","searchLimit","InstanceDetails","_useWizardContext2","onBack","resourceData","instance","displayValue","data","name","value","instanceId","account","region","state","instanceType","publicIpAddress","privateIpAddress","availabilityZone","tags","Object","keys","forEach","key","push","error","isLoading","text","variant","onClick","Confirm","_ref3","notes","rebootData","action","RebootInstance","_ref4","heading","_ref4$notes","dataLayout","deps","hydrator","post","instance_id"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/ec2/dist/reboot-instance.js"],"sourcesContent":["import React from \"react\";\nimport { Button, ButtonGroup, client, Confirmation, MetadataTable, NotePanel, Resolver, useWizardContext, } from \"@clutch-sh/core\";\nimport { useDataLayout } from \"@clutch-sh/data-layout\";\nimport { Wizard, WizardStep } from \"@clutch-sh/wizard\";\nconst InstanceIdentifier = ({ resolverType }) => {\n    const { onSubmit } = useWizardContext();\n    const resolvedResourceData = useDataLayout(\"resourceData\");\n    const onResolve = ({ results }) => {\n        // Decide how to process results.\n        resolvedResourceData.assign(results[0]);\n        onSubmit();\n    };\n    return React.createElement(Resolver, { type: resolverType, searchLimit: 1, onResolve: onResolve });\n};\nconst InstanceDetails = () => {\n    const { onSubmit, onBack } = useWizardContext();\n    const resourceData = useDataLayout(\"resourceData\");\n    const instance = resourceData.displayValue();\n    const data = [\n        { name: \"Instance ID\", value: instance.instanceId },\n        { name: \"Account\", value: instance.account },\n        { name: \"Region\", value: instance.region },\n        { name: \"State\", value: instance.state },\n        { name: \"Instance Type\", value: instance.instanceType },\n        { name: \"Public IP Address\", value: instance.publicIpAddress },\n        { name: \"Private IP Address\", value: instance.privateIpAddress },\n        { name: \"Availability Zone\", value: instance.availabilityZone },\n    ];\n    if (instance.tags) {\n        Object.keys(instance.tags).forEach(key => {\n            data.push({ name: key, value: instance.tags[key] });\n        });\n    }\n    return (React.createElement(WizardStep, { error: resourceData.error, isLoading: resourceData.isLoading },\n        React.createElement(MetadataTable, { data: data }),\n        React.createElement(ButtonGroup, null,\n            React.createElement(Button, { text: \"Back\", variant: \"neutral\", onClick: () => onBack() }),\n            React.createElement(Button, { text: \"Reboot\", variant: \"destructive\", onClick: onSubmit }))));\n};\nconst Confirm = ({ notes }) => {\n    const rebootData = useDataLayout(\"rebootData\");\n    return (React.createElement(WizardStep, { error: rebootData.error, isLoading: rebootData.isLoading },\n        React.createElement(Confirmation, { action: \"Reboot\" }),\n        React.createElement(NotePanel, { notes: notes })));\n};\nconst RebootInstance = ({ heading, resolverType, notes = [] }) => {\n    const dataLayout = {\n        resourceData: {},\n        rebootData: {\n            deps: [\"resourceData\"],\n            hydrator: (resourceData) => {\n                return client.post(\"/v1/aws/ec2/rebootInstance\", {\n                    instance_id: resourceData.instanceId,\n                    account: resourceData.account,\n                    region: resourceData.region,\n                });\n            },\n        },\n    };\n    return (React.createElement(Wizard, { dataLayout: dataLayout, heading: heading },\n        React.createElement(InstanceIdentifier, { name: \"Lookup\", resolverType: resolverType }),\n        React.createElement(InstanceDetails, { name: \"Verify\" }),\n        React.createElement(Confirm, { name: \"Result\", notes: notes })));\n};\nexport default RebootInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}