{"ast":null,"code":"import _objectSpread from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { removeLocalData, storeLocalData, transformAPISharedState } from \"./helpers\";\n/**\n * Reducer for the WorkflowStorageContext\n * This will act on the WorkflowStorageState and add / remove items from the temporary storage\n * as well as localStorage, this will (optionally) keep all storage actions in one location for all\n * workflows and allow for easier state hydration\n */\nvar workflowStorageContextReducer = function workflowStorageContextReducer(state, action) {\n  switch (action.type) {\n    // Will add data to our temporary storage as well as the local storage\n    case \"STORE_DATA\":\n      {\n        var _action$payload = action.payload,\n          componentName = _action$payload.componentName,\n          key = _action$payload.key,\n          data = _action$payload.data,\n          _action$payload$local = _action$payload.localStorage,\n          localStorage = _action$payload$local === void 0 ? true : _action$payload$local;\n        var newState = _objectSpread({}, state);\n        var fromShortLink = newState.fromShortLink,\n          workflowSessionStore = newState.workflowSessionStore;\n        if (!componentName || !componentName.length) {\n          return state;\n        }\n        if (!workflowSessionStore[componentName]) {\n          workflowSessionStore[componentName] = {};\n        }\n        if (key.length) {\n          workflowSessionStore[componentName][key] = data;\n        } else {\n          workflowSessionStore[componentName] = _objectSpread(_objectSpread({}, workflowSessionStore[componentName]), data);\n        }\n        if (localStorage && !fromShortLink) {\n          storeLocalData(key !== null && key !== void 0 ? key : componentName, data);\n        }\n        return _objectSpread(_objectSpread({}, newState), {}, {\n          workflowSessionStore: workflowSessionStore\n        });\n      }\n    // Will remove data from our temporary storage as well as the local storage\n    case \"REMOVE_DATA\":\n      {\n        var _action$payload2 = action.payload,\n          _componentName = _action$payload2.componentName,\n          _key = _action$payload2.key,\n          _action$payload2$loca = _action$payload2.localStorage,\n          _localStorage = _action$payload2$loca === void 0 ? true : _action$payload2$loca;\n        var _newState = _objectSpread({}, state);\n        var _fromShortLink = _newState.fromShortLink,\n          _workflowSessionStore = _newState.workflowSessionStore;\n        if (!_componentName || !_componentName.length) {\n          return state;\n        }\n        if (_componentName && _key) {\n          delete _workflowSessionStore[_componentName][_key];\n        } else if (_componentName) {\n          delete _workflowSessionStore[_componentName];\n        }\n        if (_localStorage && !_fromShortLink) {\n          removeLocalData(_key !== null && _key !== void 0 ? _key : _componentName);\n        }\n        return _newState;\n      }\n    // Will take a given input of data from an API and add it to the state as 'store', the only time this portion of the state should ever be modified\n    case \"HYDRATE\":\n      {\n        var _data = action.payload.data;\n        if (_data) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            hash: _data.hash,\n            fromShortLink: true,\n            workflowStore: transformAPISharedState(_data.state)\n          });\n        }\n        return state;\n      }\n    default:\n      throw new Error(\"Unknown workflow storage reducer action\");\n  }\n};\nexport default workflowStorageContextReducer;","map":{"version":3,"names":["removeLocalData","storeLocalData","transformAPISharedState","workflowStorageContextReducer","state","action","type","_action$payload","payload","componentName","key","data","_action$payload$local","localStorage","newState","_objectSpread","fromShortLink","workflowSessionStore","length","_action$payload2","_action$payload2$loca","hash","workflowStore","Error"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/core/dist/Contexts/workflow-storage-context/reducer.js"],"sourcesContent":["import { removeLocalData, storeLocalData, transformAPISharedState } from \"./helpers\";\n/**\n * Reducer for the WorkflowStorageContext\n * This will act on the WorkflowStorageState and add / remove items from the temporary storage\n * as well as localStorage, this will (optionally) keep all storage actions in one location for all\n * workflows and allow for easier state hydration\n */\nconst workflowStorageContextReducer = (state, action) => {\n    switch (action.type) {\n        // Will add data to our temporary storage as well as the local storage\n        case \"STORE_DATA\": {\n            const { componentName, key, data, localStorage = true } = action.payload;\n            const newState = { ...state };\n            const { fromShortLink, workflowSessionStore } = newState;\n            if (!componentName || !componentName.length) {\n                return state;\n            }\n            if (!workflowSessionStore[componentName]) {\n                workflowSessionStore[componentName] = {};\n            }\n            if (key.length) {\n                workflowSessionStore[componentName][key] = data;\n            }\n            else {\n                workflowSessionStore[componentName] = {\n                    ...workflowSessionStore[componentName],\n                    ...data,\n                };\n            }\n            if (localStorage && !fromShortLink) {\n                storeLocalData(key !== null && key !== void 0 ? key : componentName, data);\n            }\n            return { ...newState, workflowSessionStore };\n        }\n        // Will remove data from our temporary storage as well as the local storage\n        case \"REMOVE_DATA\": {\n            const { componentName, key, localStorage = true } = action.payload;\n            const newState = { ...state };\n            const { fromShortLink, workflowSessionStore } = newState;\n            if (!componentName || !componentName.length) {\n                return state;\n            }\n            if (componentName && key) {\n                delete workflowSessionStore[componentName][key];\n            }\n            else if (componentName) {\n                delete workflowSessionStore[componentName];\n            }\n            if (localStorage && !fromShortLink) {\n                removeLocalData(key !== null && key !== void 0 ? key : componentName);\n            }\n            return newState;\n        }\n        // Will take a given input of data from an API and add it to the state as 'store', the only time this portion of the state should ever be modified\n        case \"HYDRATE\": {\n            const { data } = action.payload;\n            if (data) {\n                return {\n                    ...state,\n                    hash: data.hash,\n                    fromShortLink: true,\n                    workflowStore: transformAPISharedState(data.state),\n                };\n            }\n            return state;\n        }\n        default:\n            throw new Error(\"Unknown workflow storage reducer action\");\n    }\n};\nexport default workflowStorageContextReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}