{"ast":null,"code":"import axios from \"axios\";\nimport { grpcResponseToError } from \"./errors\";\nvar successInterceptor = function successInterceptor(response) {\n  return response;\n};\nvar errorInterceptor = function errorInterceptor(error) {\n  var _a, _b;\n  var response = error === null || error === void 0 ? void 0 : error.response;\n  if (response === undefined) {\n    var clientError = {\n      status: {\n        code: 500,\n        text: \"Client Error\"\n      },\n      message: error.message\n    };\n    return Promise.reject(clientError);\n  }\n  // This section handles authentication redirects.\n  if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n    // TODO: turn this in to silent refresh once refresh tokens are supported.\n    var redirectUrl = window.location.pathname + window.location.search;\n    window.location.href = \"/v1/authn/login?redirect_url=\".concat(encodeURIComponent(redirectUrl));\n  }\n  // we are guaranteed to have a response object on the error from this point on\n  // since we have already accounted for axios errors.\n  var responseData = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data;\n  // if the response data has a code on it we know it's a gRPC response.\n  var err;\n  if ((responseData === null || responseData === void 0 ? void 0 : responseData.code) !== undefined) {\n    err = grpcResponseToError(error);\n  } else {\n    var message = typeof ((_b = error.response) === null || _b === void 0 ? void 0 : _b.data) === \"string\" ? error.response.data : (error === null || error === void 0 ? void 0 : error.message) || error.response.statusText;\n    err = {\n      status: {\n        code: error.response.status,\n        text: error.response.statusText\n      },\n      message: message,\n      data: responseData\n    };\n  }\n  return Promise.reject(err);\n};\nvar createClient = function createClient() {\n  var axiosClient = axios.create({\n    // n.b. the client will treat any response code >= 400 as an error and apply the error interceptor.\n    validateStatus: function validateStatus(status) {\n      return status < 400;\n    }\n  });\n  axiosClient.interceptors.response.use(successInterceptor, errorInterceptor);\n  return axiosClient;\n};\nvar client = createClient();\nexport { client, errorInterceptor, successInterceptor };","map":{"version":3,"names":["axios","grpcResponseToError","successInterceptor","response","errorInterceptor","error","_a","_b","undefined","clientError","status","code","text","message","Promise","reject","redirectUrl","window","location","pathname","search","href","concat","encodeURIComponent","responseData","data","err","statusText","createClient","axiosClient","create","validateStatus","interceptors","use","client"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/core/dist/Network/index.js"],"sourcesContent":["import axios from \"axios\";\nimport { grpcResponseToError } from \"./errors\";\nconst successInterceptor = (response) => {\n    return response;\n};\nconst errorInterceptor = (error) => {\n    var _a, _b;\n    const response = error === null || error === void 0 ? void 0 : error.response;\n    if (response === undefined) {\n        const clientError = {\n            status: {\n                code: 500,\n                text: \"Client Error\",\n            },\n            message: error.message,\n        };\n        return Promise.reject(clientError);\n    }\n    // This section handles authentication redirects.\n    if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n        // TODO: turn this in to silent refresh once refresh tokens are supported.\n        const redirectUrl = window.location.pathname + window.location.search;\n        window.location.href = `/v1/authn/login?redirect_url=${encodeURIComponent(redirectUrl)}`;\n    }\n    // we are guaranteed to have a response object on the error from this point on\n    // since we have already accounted for axios errors.\n    const responseData = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data;\n    // if the response data has a code on it we know it's a gRPC response.\n    let err;\n    if ((responseData === null || responseData === void 0 ? void 0 : responseData.code) !== undefined) {\n        err = grpcResponseToError(error);\n    }\n    else {\n        const message = typeof ((_b = error.response) === null || _b === void 0 ? void 0 : _b.data) === \"string\"\n            ? error.response.data\n            : (error === null || error === void 0 ? void 0 : error.message) || error.response.statusText;\n        err = {\n            status: {\n                code: error.response.status,\n                text: error.response.statusText,\n            },\n            message,\n            data: responseData,\n        };\n    }\n    return Promise.reject(err);\n};\nconst createClient = () => {\n    const axiosClient = axios.create({\n        // n.b. the client will treat any response code >= 400 as an error and apply the error interceptor.\n        validateStatus: status => {\n            return status < 400;\n        },\n    });\n    axiosClient.interceptors.response.use(successInterceptor, errorInterceptor);\n    return axiosClient;\n};\nconst client = createClient();\nexport { client, errorInterceptor, successInterceptor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}