{"ast":null,"code":"import React from \"react\";\nimport { Button, ButtonGroup, client, Confirmation, MetadataTable, NotePanel, Resolver, useWizardContext } from \"@clutch-sh/core\";\nimport { useDataLayout } from \"@clutch-sh/data-layout\";\nimport { Wizard, WizardStep } from \"@clutch-sh/wizard\";\nimport { number, ref } from \"yup\";\nvar GroupIdentifier = function GroupIdentifier(_ref) {\n  var resolverType = _ref.resolverType;\n  var _useWizardContext = useWizardContext(),\n    onSubmit = _useWizardContext.onSubmit;\n  var groupData = useDataLayout(\"groupData\");\n  var onResolve = function onResolve(_ref2) {\n    var results = _ref2.results;\n    // Decide how to process results.\n    groupData.assign(results[0]);\n    onSubmit();\n  };\n  return React.createElement(Resolver, {\n    type: resolverType,\n    searchLimit: 1,\n    onResolve: onResolve\n  });\n};\nvar GroupDetails = function GroupDetails() {\n  var _useWizardContext2 = useWizardContext(),\n    onSubmit = _useWizardContext2.onSubmit,\n    onBack = _useWizardContext2.onBack;\n  var groupData = useDataLayout(\"groupData\");\n  var group = groupData.displayValue();\n  var update = function update(key, value) {\n    groupData.updateData(key, value);\n  };\n  return React.createElement(WizardStep, {\n    error: groupData.error,\n    isLoading: groupData.isLoading\n  }, React.createElement(\"strong\", null, \"ASG Details\"), React.createElement(MetadataTable, {\n    onUpdate: update,\n    data: [{\n      name: \"Name\",\n      value: group.name\n    }, {\n      name: \"Account\",\n      value: group.account\n    }, {\n      name: \"Region\",\n      value: group.region\n    }, {\n      name: \"Termination Policy\",\n      value: group.terminationPolicies\n    }, {\n      name: \"Min Size\",\n      value: group.size.min,\n      input: {\n        type: \"number\",\n        key: \"size.min\",\n        validation: group.size.min > 0 ? number().integer().moreThan(0) : number().integer().min(0)\n      }\n    }, {\n      name: \"Max Size\",\n      value: group.size.max,\n      input: {\n        type: \"number\",\n        key: \"size.max\",\n        validation: group.size.min > 0 ? number().integer().min(ref(\"Min Size\")) : number().integer().moreThan(0)\n      }\n    }, {\n      name: \"Desired Size\",\n      value: group.size.desired,\n      input: {\n        type: \"number\",\n        key: \"size.desired\",\n        validation: number().integer().min(ref(\"Min Size\")).max(ref(\"Max Size\"))\n      }\n    }, {\n      name: \"Availability Zone\",\n      value: group.zones\n    }]\n  }), React.createElement(ButtonGroup, null, React.createElement(Button, {\n    text: \"Back\",\n    variant: \"neutral\",\n    onClick: function onClick() {\n      return onBack();\n    }\n  }), React.createElement(Button, {\n    text: \"Resize\",\n    variant: \"destructive\",\n    onClick: onSubmit\n  })));\n};\n// TODO (sperry): possibly show the previous size values\nvar Confirm = function Confirm(_ref3) {\n  var notes = _ref3.notes;\n  var group = useDataLayout(\"groupData\").displayValue();\n  var resizeData = useDataLayout(\"resizeData\");\n  return React.createElement(WizardStep, {\n    error: resizeData.error,\n    isLoading: resizeData.isLoading\n  }, React.createElement(Confirmation, {\n    action: \"Resize\"\n  }), React.createElement(MetadataTable, {\n    data: [{\n      name: \"Name\",\n      value: group.name\n    }, {\n      name: \"New Min Size\",\n      value: group.size.min\n    }, {\n      name: \"New Max Size\",\n      value: group.size.max\n    }, {\n      name: \"New Desired Size\",\n      value: group.size.desired\n    }]\n  }), React.createElement(NotePanel, {\n    notes: notes\n  }));\n};\nvar ResizeAutoscalingGroup = function ResizeAutoscalingGroup(_ref4) {\n  var heading = _ref4.heading,\n    resolverType = _ref4.resolverType,\n    _ref4$notes = _ref4.notes,\n    notes = _ref4$notes === void 0 ? [] : _ref4$notes;\n  var dataLayout = {\n    groupData: {},\n    resizeData: {\n      deps: [\"groupData\"],\n      hydrator: function hydrator(groupData) {\n        return client.post(\"/v1/aws/ec2/resizeAutoscalingGroup\", {\n          name: groupData.name,\n          account: groupData.account,\n          region: groupData.region,\n          size: groupData.size\n        });\n      }\n    }\n  };\n  return React.createElement(Wizard, {\n    dataLayout: dataLayout,\n    heading: heading\n  }, React.createElement(GroupIdentifier, {\n    name: \"Lookup\",\n    resolverType: resolverType\n  }), React.createElement(GroupDetails, {\n    name: \"Modify\"\n  }), React.createElement(Confirm, {\n    name: \"Result\",\n    notes: notes\n  }));\n};\nexport default ResizeAutoscalingGroup;","map":{"version":3,"names":["React","Button","ButtonGroup","client","Confirmation","MetadataTable","NotePanel","Resolver","useWizardContext","useDataLayout","Wizard","WizardStep","number","ref","GroupIdentifier","_ref","resolverType","_useWizardContext","onSubmit","groupData","onResolve","_ref2","results","assign","createElement","type","searchLimit","GroupDetails","_useWizardContext2","onBack","group","displayValue","update","key","value","updateData","error","isLoading","onUpdate","data","name","account","region","terminationPolicies","size","min","input","validation","integer","moreThan","max","desired","zones","text","variant","onClick","Confirm","_ref3","notes","resizeData","action","ResizeAutoscalingGroup","_ref4","heading","_ref4$notes","dataLayout","deps","hydrator","post"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/ec2/dist/resize-asg.js"],"sourcesContent":["import React from \"react\";\nimport { Button, ButtonGroup, client, Confirmation, MetadataTable, NotePanel, Resolver, useWizardContext, } from \"@clutch-sh/core\";\nimport { useDataLayout } from \"@clutch-sh/data-layout\";\nimport { Wizard, WizardStep } from \"@clutch-sh/wizard\";\nimport { number, ref } from \"yup\";\nconst GroupIdentifier = ({ resolverType }) => {\n    const { onSubmit } = useWizardContext();\n    const groupData = useDataLayout(\"groupData\");\n    const onResolve = ({ results }) => {\n        // Decide how to process results.\n        groupData.assign(results[0]);\n        onSubmit();\n    };\n    return React.createElement(Resolver, { type: resolverType, searchLimit: 1, onResolve: onResolve });\n};\nconst GroupDetails = () => {\n    const { onSubmit, onBack } = useWizardContext();\n    const groupData = useDataLayout(\"groupData\");\n    const group = groupData.displayValue();\n    const update = (key, value) => {\n        groupData.updateData(key, value);\n    };\n    return (React.createElement(WizardStep, { error: groupData.error, isLoading: groupData.isLoading },\n        React.createElement(\"strong\", null, \"ASG Details\"),\n        React.createElement(MetadataTable, { onUpdate: update, data: [\n                { name: \"Name\", value: group.name },\n                { name: \"Account\", value: group.account },\n                { name: \"Region\", value: group.region },\n                { name: \"Termination Policy\", value: group.terminationPolicies },\n                {\n                    name: \"Min Size\",\n                    value: group.size.min,\n                    input: {\n                        type: \"number\",\n                        key: \"size.min\",\n                        validation: group.size.min > 0 ? number().integer().moreThan(0) : number().integer().min(0),\n                    },\n                },\n                {\n                    name: \"Max Size\",\n                    value: group.size.max,\n                    input: {\n                        type: \"number\",\n                        key: \"size.max\",\n                        validation: group.size.min > 0\n                            ? number()\n                                .integer()\n                                .min(ref(\"Min Size\"))\n                            : number().integer().moreThan(0),\n                    },\n                },\n                {\n                    name: \"Desired Size\",\n                    value: group.size.desired,\n                    input: {\n                        type: \"number\",\n                        key: \"size.desired\",\n                        validation: number()\n                            .integer()\n                            .min(ref(\"Min Size\"))\n                            .max(ref(\"Max Size\")),\n                    },\n                },\n                { name: \"Availability Zone\", value: group.zones },\n            ] }),\n        React.createElement(ButtonGroup, null,\n            React.createElement(Button, { text: \"Back\", variant: \"neutral\", onClick: () => onBack() }),\n            React.createElement(Button, { text: \"Resize\", variant: \"destructive\", onClick: onSubmit }))));\n};\n// TODO (sperry): possibly show the previous size values\nconst Confirm = ({ notes }) => {\n    const group = useDataLayout(\"groupData\").displayValue();\n    const resizeData = useDataLayout(\"resizeData\");\n    return (React.createElement(WizardStep, { error: resizeData.error, isLoading: resizeData.isLoading },\n        React.createElement(Confirmation, { action: \"Resize\" }),\n        React.createElement(MetadataTable, { data: [\n                { name: \"Name\", value: group.name },\n                { name: \"New Min Size\", value: group.size.min },\n                { name: \"New Max Size\", value: group.size.max },\n                { name: \"New Desired Size\", value: group.size.desired },\n            ] }),\n        React.createElement(NotePanel, { notes: notes })));\n};\nconst ResizeAutoscalingGroup = ({ heading, resolverType, notes = [] }) => {\n    const dataLayout = {\n        groupData: {},\n        resizeData: {\n            deps: [\"groupData\"],\n            hydrator: (groupData) => {\n                return client.post(\"/v1/aws/ec2/resizeAutoscalingGroup\", {\n                    name: groupData.name,\n                    account: groupData.account,\n                    region: groupData.region,\n                    size: groupData.size,\n                });\n            },\n        },\n    };\n    return (React.createElement(Wizard, { dataLayout: dataLayout, heading: heading },\n        React.createElement(GroupIdentifier, { name: \"Lookup\", resolverType: resolverType }),\n        React.createElement(GroupDetails, { name: \"Modify\" }),\n        React.createElement(Confirm, { name: \"Result\", notes: notes })));\n};\nexport default ResizeAutoscalingGroup;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,YAAY,EAAEC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,gBAAgB,QAAS,iBAAiB;AAClI,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,MAAM,EAAEC,UAAU,QAAQ,mBAAmB;AACtD,SAASC,MAAM,EAAEC,GAAG,QAAQ,KAAK;AACjC,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAAyB;EAAA,IAAnBC,YAAY,GAAAD,IAAA,CAAZC,YAAY;EACnC,IAAAC,iBAAA,GAAqBT,gBAAgB,CAAC,CAAC;IAA/BU,QAAQ,GAAAD,iBAAA,CAARC,QAAQ;EAChB,IAAMC,SAAS,GAAGV,aAAa,CAAC,WAAW,CAAC;EAC5C,IAAMW,SAAS,GAAG,SAAZA,SAASA,CAAAC,KAAA,EAAoB;IAAA,IAAdC,OAAO,GAAAD,KAAA,CAAPC,OAAO;IACxB;IACAH,SAAS,CAACI,MAAM,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5BJ,QAAQ,CAAC,CAAC;EACd,CAAC;EACD,OAAOlB,KAAK,CAACwB,aAAa,CAACjB,QAAQ,EAAE;IAAEkB,IAAI,EAAET,YAAY;IAAEU,WAAW,EAAE,CAAC;IAAEN,SAAS,EAAEA;EAAU,CAAC,CAAC;AACtG,CAAC;AACD,IAAMO,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACvB,IAAAC,kBAAA,GAA6BpB,gBAAgB,CAAC,CAAC;IAAvCU,QAAQ,GAAAU,kBAAA,CAARV,QAAQ;IAAEW,MAAM,GAAAD,kBAAA,CAANC,MAAM;EACxB,IAAMV,SAAS,GAAGV,aAAa,CAAC,WAAW,CAAC;EAC5C,IAAMqB,KAAK,GAAGX,SAAS,CAACY,YAAY,CAAC,CAAC;EACtC,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAIC,GAAG,EAAEC,KAAK,EAAK;IAC3Bf,SAAS,CAACgB,UAAU,CAACF,GAAG,EAAEC,KAAK,CAAC;EACpC,CAAC;EACD,OAAQlC,KAAK,CAACwB,aAAa,CAACb,UAAU,EAAE;IAAEyB,KAAK,EAAEjB,SAAS,CAACiB,KAAK;IAAEC,SAAS,EAAElB,SAAS,CAACkB;EAAU,CAAC,EAC9FrC,KAAK,CAACwB,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,aAAa,CAAC,EAClDxB,KAAK,CAACwB,aAAa,CAACnB,aAAa,EAAE;IAAEiC,QAAQ,EAAEN,MAAM;IAAEO,IAAI,EAAE,CACrD;MAAEC,IAAI,EAAE,MAAM;MAAEN,KAAK,EAAEJ,KAAK,CAACU;IAAK,CAAC,EACnC;MAAEA,IAAI,EAAE,SAAS;MAAEN,KAAK,EAAEJ,KAAK,CAACW;IAAQ,CAAC,EACzC;MAAED,IAAI,EAAE,QAAQ;MAAEN,KAAK,EAAEJ,KAAK,CAACY;IAAO,CAAC,EACvC;MAAEF,IAAI,EAAE,oBAAoB;MAAEN,KAAK,EAAEJ,KAAK,CAACa;IAAoB,CAAC,EAChE;MACIH,IAAI,EAAE,UAAU;MAChBN,KAAK,EAAEJ,KAAK,CAACc,IAAI,CAACC,GAAG;MACrBC,KAAK,EAAE;QACHrB,IAAI,EAAE,QAAQ;QACdQ,GAAG,EAAE,UAAU;QACfc,UAAU,EAAEjB,KAAK,CAACc,IAAI,CAACC,GAAG,GAAG,CAAC,GAAGjC,MAAM,CAAC,CAAC,CAACoC,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAGrC,MAAM,CAAC,CAAC,CAACoC,OAAO,CAAC,CAAC,CAACH,GAAG,CAAC,CAAC;MAC9F;IACJ,CAAC,EACD;MACIL,IAAI,EAAE,UAAU;MAChBN,KAAK,EAAEJ,KAAK,CAACc,IAAI,CAACM,GAAG;MACrBJ,KAAK,EAAE;QACHrB,IAAI,EAAE,QAAQ;QACdQ,GAAG,EAAE,UAAU;QACfc,UAAU,EAAEjB,KAAK,CAACc,IAAI,CAACC,GAAG,GAAG,CAAC,GACxBjC,MAAM,CAAC,CAAC,CACLoC,OAAO,CAAC,CAAC,CACTH,GAAG,CAAChC,GAAG,CAAC,UAAU,CAAC,CAAC,GACvBD,MAAM,CAAC,CAAC,CAACoC,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACvC;IACJ,CAAC,EACD;MACIT,IAAI,EAAE,cAAc;MACpBN,KAAK,EAAEJ,KAAK,CAACc,IAAI,CAACO,OAAO;MACzBL,KAAK,EAAE;QACHrB,IAAI,EAAE,QAAQ;QACdQ,GAAG,EAAE,cAAc;QACnBc,UAAU,EAAEnC,MAAM,CAAC,CAAC,CACfoC,OAAO,CAAC,CAAC,CACTH,GAAG,CAAChC,GAAG,CAAC,UAAU,CAAC,CAAC,CACpBqC,GAAG,CAACrC,GAAG,CAAC,UAAU,CAAC;MAC5B;IACJ,CAAC,EACD;MAAE2B,IAAI,EAAE,mBAAmB;MAAEN,KAAK,EAAEJ,KAAK,CAACsB;IAAM,CAAC;EACnD,CAAC,CAAC,EACRpD,KAAK,CAACwB,aAAa,CAACtB,WAAW,EAAE,IAAI,EACjCF,KAAK,CAACwB,aAAa,CAACvB,MAAM,EAAE;IAAEoD,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAE,SAAS;IAAEC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAM1B,MAAM,CAAC,CAAC;IAAA;EAAC,CAAC,CAAC,EAC1F7B,KAAK,CAACwB,aAAa,CAACvB,MAAM,EAAE;IAAEoD,IAAI,EAAE,QAAQ;IAAEC,OAAO,EAAE,aAAa;IAAEC,OAAO,EAAErC;EAAS,CAAC,CAAC,CAAC,CAAC;AACxG,CAAC;AACD;AACA,IAAMsC,OAAO,GAAG,SAAVA,OAAOA,CAAAC,KAAA,EAAkB;EAAA,IAAZC,KAAK,GAAAD,KAAA,CAALC,KAAK;EACpB,IAAM5B,KAAK,GAAGrB,aAAa,CAAC,WAAW,CAAC,CAACsB,YAAY,CAAC,CAAC;EACvD,IAAM4B,UAAU,GAAGlD,aAAa,CAAC,YAAY,CAAC;EAC9C,OAAQT,KAAK,CAACwB,aAAa,CAACb,UAAU,EAAE;IAAEyB,KAAK,EAAEuB,UAAU,CAACvB,KAAK;IAAEC,SAAS,EAAEsB,UAAU,CAACtB;EAAU,CAAC,EAChGrC,KAAK,CAACwB,aAAa,CAACpB,YAAY,EAAE;IAAEwD,MAAM,EAAE;EAAS,CAAC,CAAC,EACvD5D,KAAK,CAACwB,aAAa,CAACnB,aAAa,EAAE;IAAEkC,IAAI,EAAE,CACnC;MAAEC,IAAI,EAAE,MAAM;MAAEN,KAAK,EAAEJ,KAAK,CAACU;IAAK,CAAC,EACnC;MAAEA,IAAI,EAAE,cAAc;MAAEN,KAAK,EAAEJ,KAAK,CAACc,IAAI,CAACC;IAAI,CAAC,EAC/C;MAAEL,IAAI,EAAE,cAAc;MAAEN,KAAK,EAAEJ,KAAK,CAACc,IAAI,CAACM;IAAI,CAAC,EAC/C;MAAEV,IAAI,EAAE,kBAAkB;MAAEN,KAAK,EAAEJ,KAAK,CAACc,IAAI,CAACO;IAAQ,CAAC;EACzD,CAAC,CAAC,EACRnD,KAAK,CAACwB,aAAa,CAAClB,SAAS,EAAE;IAAEoD,KAAK,EAAEA;EAAM,CAAC,CAAC,CAAC;AACzD,CAAC;AACD,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAAC,KAAA,EAA8C;EAAA,IAAxCC,OAAO,GAAAD,KAAA,CAAPC,OAAO;IAAE/C,YAAY,GAAA8C,KAAA,CAAZ9C,YAAY;IAAAgD,WAAA,GAAAF,KAAA,CAAEJ,KAAK;IAALA,KAAK,GAAAM,WAAA,cAAG,EAAE,GAAAA,WAAA;EAC/D,IAAMC,UAAU,GAAG;IACf9C,SAAS,EAAE,CAAC,CAAC;IACbwC,UAAU,EAAE;MACRO,IAAI,EAAE,CAAC,WAAW,CAAC;MACnBC,QAAQ,EAAE,SAAAA,SAAChD,SAAS,EAAK;QACrB,OAAOhB,MAAM,CAACiE,IAAI,CAAC,oCAAoC,EAAE;UACrD5B,IAAI,EAAErB,SAAS,CAACqB,IAAI;UACpBC,OAAO,EAAEtB,SAAS,CAACsB,OAAO;UAC1BC,MAAM,EAAEvB,SAAS,CAACuB,MAAM;UACxBE,IAAI,EAAEzB,SAAS,CAACyB;QACpB,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EACD,OAAQ5C,KAAK,CAACwB,aAAa,CAACd,MAAM,EAAE;IAAEuD,UAAU,EAAEA,UAAU;IAAEF,OAAO,EAAEA;EAAQ,CAAC,EAC5E/D,KAAK,CAACwB,aAAa,CAACV,eAAe,EAAE;IAAE0B,IAAI,EAAE,QAAQ;IAAExB,YAAY,EAAEA;EAAa,CAAC,CAAC,EACpFhB,KAAK,CAACwB,aAAa,CAACG,YAAY,EAAE;IAAEa,IAAI,EAAE;EAAS,CAAC,CAAC,EACrDxC,KAAK,CAACwB,aAAa,CAACgC,OAAO,EAAE;IAAEhB,IAAI,EAAE,QAAQ;IAAEkB,KAAK,EAAEA;EAAM,CAAC,CAAC,CAAC;AACvE,CAAC;AACD,eAAeG,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}