{"ast":null,"code":"import _objectSpread from \"/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport React from \"react\";\nvar ResolverAction;\n(function (ResolverAction) {\n  ResolverAction[ResolverAction[\"SCHEMAS_LOADING\"] = 0] = \"SCHEMAS_LOADING\";\n  ResolverAction[ResolverAction[\"SCHEMAS_SUCCCESS\"] = 1] = \"SCHEMAS_SUCCCESS\";\n  ResolverAction[ResolverAction[\"SCHEMAS_ERROR\"] = 2] = \"SCHEMAS_ERROR\";\n  ResolverAction[ResolverAction[\"RESOLVING\"] = 3] = \"RESOLVING\";\n  ResolverAction[ResolverAction[\"RESOLVE_ERROR\"] = 4] = \"RESOLVE_ERROR\";\n  ResolverAction[ResolverAction[\"RESOLVE_SUCCESS\"] = 5] = \"RESOLVE_SUCCESS\";\n})(ResolverAction || (ResolverAction = {}));\nvar initialState = {\n  schemasLoading: true,\n  allSchemas: [],\n  searchableSchemas: [],\n  schemaFetchError: undefined,\n  resolverLoading: false,\n  resolverData: {},\n  resolverFetchError: undefined\n};\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case ResolverAction.SCHEMAS_LOADING:\n      return _objectSpread({}, initialState);\n    case ResolverAction.SCHEMAS_SUCCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        schemasLoading: false,\n        schemaFetchError: undefined,\n        searchableSchemas: action.allSchemas.map(function (schema) {\n          return schema.metadata.searchable || schema.metadata.search.enabled ? schema : null;\n        }).filter(function (x) {\n          return x;\n        }),\n        allSchemas: action.allSchemas\n      });\n    case ResolverAction.SCHEMAS_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        schemasLoading: false,\n        schemaFetchError: action.error\n      });\n    case ResolverAction.RESOLVING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        resolverLoading: true,\n        resolverFetchError: undefined\n      });\n    case ResolverAction.RESOLVE_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        resolverLoading: false,\n        resolverFetchError: action.error\n      });\n    case ResolverAction.RESOLVE_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        resolverLoading: false,\n        resolverFetchError: undefined\n      });\n    default:\n      throw new Error(\"Unknown resolver action: \".concat(action.type));\n  }\n};\nvar useResolverState = function useResolverState() {\n  return React.useReducer(reducer, initialState);\n};\nexport { ResolverAction, useResolverState };","map":{"version":3,"names":["React","ResolverAction","initialState","schemasLoading","allSchemas","searchableSchemas","schemaFetchError","undefined","resolverLoading","resolverData","resolverFetchError","reducer","state","action","type","SCHEMAS_LOADING","_objectSpread","SCHEMAS_SUCCCESS","map","schema","metadata","searchable","search","enabled","filter","x","SCHEMAS_ERROR","error","RESOLVING","RESOLVE_ERROR","RESOLVE_SUCCESS","Error","concat","useResolverState","useReducer"],"sources":["/home/daniel/go/src/github.com/DanielYevelkin/clutch-custom-gateway/frontend/node_modules/@clutch-sh/core/dist/Resolver/state.js"],"sourcesContent":["import React from \"react\";\nvar ResolverAction;\n(function (ResolverAction) {\n    ResolverAction[ResolverAction[\"SCHEMAS_LOADING\"] = 0] = \"SCHEMAS_LOADING\";\n    ResolverAction[ResolverAction[\"SCHEMAS_SUCCCESS\"] = 1] = \"SCHEMAS_SUCCCESS\";\n    ResolverAction[ResolverAction[\"SCHEMAS_ERROR\"] = 2] = \"SCHEMAS_ERROR\";\n    ResolverAction[ResolverAction[\"RESOLVING\"] = 3] = \"RESOLVING\";\n    ResolverAction[ResolverAction[\"RESOLVE_ERROR\"] = 4] = \"RESOLVE_ERROR\";\n    ResolverAction[ResolverAction[\"RESOLVE_SUCCESS\"] = 5] = \"RESOLVE_SUCCESS\";\n})(ResolverAction || (ResolverAction = {}));\nconst initialState = {\n    schemasLoading: true,\n    allSchemas: [],\n    searchableSchemas: [],\n    schemaFetchError: undefined,\n    resolverLoading: false,\n    resolverData: {},\n    resolverFetchError: undefined,\n};\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ResolverAction.SCHEMAS_LOADING:\n            return { ...initialState };\n        case ResolverAction.SCHEMAS_SUCCCESS:\n            return {\n                ...state,\n                schemasLoading: false,\n                schemaFetchError: undefined,\n                searchableSchemas: action.allSchemas\n                    .map(schema => {\n                    return schema.metadata.searchable || schema.metadata.search.enabled ? schema : null;\n                })\n                    .filter(x => x),\n                allSchemas: action.allSchemas,\n            };\n        case ResolverAction.SCHEMAS_ERROR:\n            return {\n                ...state,\n                schemasLoading: false,\n                schemaFetchError: action.error,\n            };\n        case ResolverAction.RESOLVING:\n            return {\n                ...state,\n                resolverLoading: true,\n                resolverFetchError: undefined,\n            };\n        case ResolverAction.RESOLVE_ERROR:\n            return {\n                ...state,\n                resolverLoading: false,\n                resolverFetchError: action.error,\n            };\n        case ResolverAction.RESOLVE_SUCCESS:\n            return {\n                ...state,\n                resolverLoading: false,\n                resolverFetchError: undefined,\n            };\n        default:\n            throw new Error(`Unknown resolver action: ${action.type}`);\n    }\n};\nconst useResolverState = () => {\n    return React.useReducer(reducer, initialState);\n};\nexport { ResolverAction, useResolverState };\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,IAAIC,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvBA,cAAc,CAACA,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,iBAAiB;EACzEA,cAAc,CAACA,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB;EAC3EA,cAAc,CAACA,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;EACrEA,cAAc,CAACA,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EAC7DA,cAAc,CAACA,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;EACrEA,cAAc,CAACA,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,iBAAiB;AAC7E,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,IAAMC,YAAY,GAAG;EACjBC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE,EAAE;EACdC,iBAAiB,EAAE,EAAE;EACrBC,gBAAgB,EAAEC,SAAS;EAC3BC,eAAe,EAAE,KAAK;EACtBC,YAAY,EAAE,CAAC,CAAC;EAChBC,kBAAkB,EAAEH;AACxB,CAAC;AACD,IAAMI,OAAO,GAAG,SAAVA,OAAOA,CAAIC,KAAK,EAAEC,MAAM,EAAK;EAC/B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKb,cAAc,CAACc,eAAe;MAC/B,OAAAC,aAAA,KAAYd,YAAY;IAC5B,KAAKD,cAAc,CAACgB,gBAAgB;MAChC,OAAAD,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRT,cAAc,EAAE,KAAK;QACrBG,gBAAgB,EAAEC,SAAS;QAC3BF,iBAAiB,EAAEQ,MAAM,CAACT,UAAU,CAC/Bc,GAAG,CAAC,UAAAC,MAAM,EAAI;UACf,OAAOA,MAAM,CAACC,QAAQ,CAACC,UAAU,IAAIF,MAAM,CAACC,QAAQ,CAACE,MAAM,CAACC,OAAO,GAAGJ,MAAM,GAAG,IAAI;QACvF,CAAC,CAAC,CACGK,MAAM,CAAC,UAAAC,CAAC;UAAA,OAAIA,CAAC;QAAA,EAAC;QACnBrB,UAAU,EAAES,MAAM,CAACT;MAAU;IAErC,KAAKH,cAAc,CAACyB,aAAa;MAC7B,OAAAV,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRT,cAAc,EAAE,KAAK;QACrBG,gBAAgB,EAAEO,MAAM,CAACc;MAAK;IAEtC,KAAK1B,cAAc,CAAC2B,SAAS;MACzB,OAAAZ,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRJ,eAAe,EAAE,IAAI;QACrBE,kBAAkB,EAAEH;MAAS;IAErC,KAAKN,cAAc,CAAC4B,aAAa;MAC7B,OAAAb,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRJ,eAAe,EAAE,KAAK;QACtBE,kBAAkB,EAAEG,MAAM,CAACc;MAAK;IAExC,KAAK1B,cAAc,CAAC6B,eAAe;MAC/B,OAAAd,aAAA,CAAAA,aAAA,KACOJ,KAAK;QACRJ,eAAe,EAAE,KAAK;QACtBE,kBAAkB,EAAEH;MAAS;IAErC;MACI,MAAM,IAAIwB,KAAK,6BAAAC,MAAA,CAA6BnB,MAAM,CAACC,IAAI,CAAE,CAAC;EAClE;AACJ,CAAC;AACD,IAAMmB,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;EAC3B,OAAOjC,KAAK,CAACkC,UAAU,CAACvB,OAAO,EAAET,YAAY,CAAC;AAClD,CAAC;AACD,SAASD,cAAc,EAAEgC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}