// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: vmapi/v1/vmapi.proto

package vmapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VirtualMachineService_GetVMs_FullMethodName = "/vmapi.VirtualMachineService/GetVMs"
	VirtualMachineService_AddVM_FullMethodName  = "/vmapi.VirtualMachineService/AddVM"
)

// VirtualMachineServiceClient is the client API for VirtualMachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachineServiceClient interface {
	GetVMs(ctx context.Context, in *GetVMsRequest, opts ...grpc.CallOption) (*GetVMsResponse, error)
	// Add a new virtual machine
	AddVM(ctx context.Context, in *AddVMRequest, opts ...grpc.CallOption) (*AddVMResponse, error)
}

type virtualMachineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachineServiceClient(cc grpc.ClientConnInterface) VirtualMachineServiceClient {
	return &virtualMachineServiceClient{cc}
}

func (c *virtualMachineServiceClient) GetVMs(ctx context.Context, in *GetVMsRequest, opts ...grpc.CallOption) (*GetVMsResponse, error) {
	out := new(GetVMsResponse)
	err := c.cc.Invoke(ctx, VirtualMachineService_GetVMs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) AddVM(ctx context.Context, in *AddVMRequest, opts ...grpc.CallOption) (*AddVMResponse, error) {
	out := new(AddVMResponse)
	err := c.cc.Invoke(ctx, VirtualMachineService_AddVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineServiceServer is the server API for VirtualMachineService service.
// All implementations should embed UnimplementedVirtualMachineServiceServer
// for forward compatibility
type VirtualMachineServiceServer interface {
	GetVMs(context.Context, *GetVMsRequest) (*GetVMsResponse, error)
	// Add a new virtual machine
	AddVM(context.Context, *AddVMRequest) (*AddVMResponse, error)
}

// UnimplementedVirtualMachineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVirtualMachineServiceServer struct {
}

func (UnimplementedVirtualMachineServiceServer) GetVMs(context.Context, *GetVMsRequest) (*GetVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMs not implemented")
}
func (UnimplementedVirtualMachineServiceServer) AddVM(context.Context, *AddVMRequest) (*AddVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVM not implemented")
}

// UnsafeVirtualMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachineServiceServer will
// result in compilation errors.
type UnsafeVirtualMachineServiceServer interface {
	mustEmbedUnimplementedVirtualMachineServiceServer()
}

func RegisterVirtualMachineServiceServer(s grpc.ServiceRegistrar, srv VirtualMachineServiceServer) {
	s.RegisterService(&VirtualMachineService_ServiceDesc, srv)
}

func _VirtualMachineService_GetVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).GetVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineService_GetVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).GetVMs(ctx, req.(*GetVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_AddVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).AddVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineService_AddVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).AddVM(ctx, req.(*AddVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualMachineService_ServiceDesc is the grpc.ServiceDesc for VirtualMachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vmapi.VirtualMachineService",
	HandlerType: (*VirtualMachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVMs",
			Handler:    _VirtualMachineService_GetVMs_Handler,
		},
		{
			MethodName: "AddVM",
			Handler:    _VirtualMachineService_AddVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmapi/v1/vmapi.proto",
}
