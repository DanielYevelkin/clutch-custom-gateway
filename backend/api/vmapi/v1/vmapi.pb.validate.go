// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vmapi/v1/vmapi.proto

package vmapiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetVMsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetVMsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVMsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetVMsRequestMultiError, or
// nil if none found.
func (m *GetVMsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVMsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetVMsRequestMultiError(errors)
	}

	return nil
}

// GetVMsRequestMultiError is an error wrapping multiple validation errors
// returned by GetVMsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVMsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVMsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVMsRequestMultiError) AllErrors() []error { return m }

// GetVMsRequestValidationError is the validation error returned by
// GetVMsRequest.Validate if the designated constraints aren't met.
type GetVMsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVMsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVMsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVMsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVMsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVMsRequestValidationError) ErrorName() string { return "GetVMsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVMsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVMsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVMsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVMsRequestValidationError{}

// Validate checks the field values on GetVMsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetVMsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVMsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetVMsResponseMultiError,
// or nil if none found.
func (m *GetVMsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVMsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVMsResponseValidationError{
						field:  fmt.Sprintf("Vms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVMsResponseValidationError{
						field:  fmt.Sprintf("Vms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVMsResponseValidationError{
					field:  fmt.Sprintf("Vms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetVMsResponseMultiError(errors)
	}

	return nil
}

// GetVMsResponseMultiError is an error wrapping multiple validation errors
// returned by GetVMsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVMsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVMsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVMsResponseMultiError) AllErrors() []error { return m }

// GetVMsResponseValidationError is the validation error returned by
// GetVMsResponse.Validate if the designated constraints aren't met.
type GetVMsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVMsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVMsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVMsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVMsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVMsResponseValidationError) ErrorName() string { return "GetVMsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetVMsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVMsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVMsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVMsResponseValidationError{}

// Validate checks the field values on AddVMRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddVMRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVMRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddVMRequestMultiError, or
// nil if none found.
func (m *AddVMRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVMRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddVMRequestValidationError{
					field:  "Vm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddVMRequestValidationError{
					field:  "Vm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddVMRequestValidationError{
				field:  "Vm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddVMRequestMultiError(errors)
	}

	return nil
}

// AddVMRequestMultiError is an error wrapping multiple validation errors
// returned by AddVMRequest.ValidateAll() if the designated constraints aren't met.
type AddVMRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVMRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVMRequestMultiError) AllErrors() []error { return m }

// AddVMRequestValidationError is the validation error returned by
// AddVMRequest.Validate if the designated constraints aren't met.
type AddVMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVMRequestValidationError) ErrorName() string { return "AddVMRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddVMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVMRequestValidationError{}

// Validate checks the field values on AddVMResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddVMResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVMResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddVMResponseMultiError, or
// nil if none found.
func (m *AddVMResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVMResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddVMResponseValidationError{
					field:  "Vm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddVMResponseValidationError{
					field:  "Vm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddVMResponseValidationError{
				field:  "Vm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddVMResponseMultiError(errors)
	}

	return nil
}

// AddVMResponseMultiError is an error wrapping multiple validation errors
// returned by AddVMResponse.ValidateAll() if the designated constraints
// aren't met.
type AddVMResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVMResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVMResponseMultiError) AllErrors() []error { return m }

// AddVMResponseValidationError is the validation error returned by
// AddVMResponse.Validate if the designated constraints aren't met.
type AddVMResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVMResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVMResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVMResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVMResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVMResponseValidationError) ErrorName() string { return "AddVMResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddVMResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVMResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVMResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVMResponseValidationError{}

// Validate checks the field values on VirtualMachine with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VirtualMachine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualMachine with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VirtualMachineMultiError,
// or nil if none found.
func (m *VirtualMachine) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualMachine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Cpu

	// no validation rules for Ram

	if len(errors) > 0 {
		return VirtualMachineMultiError(errors)
	}

	return nil
}

// VirtualMachineMultiError is an error wrapping multiple validation errors
// returned by VirtualMachine.ValidateAll() if the designated constraints
// aren't met.
type VirtualMachineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualMachineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualMachineMultiError) AllErrors() []error { return m }

// VirtualMachineValidationError is the validation error returned by
// VirtualMachine.Validate if the designated constraints aren't met.
type VirtualMachineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualMachineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualMachineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualMachineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualMachineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualMachineValidationError) ErrorName() string { return "VirtualMachineValidationError" }

// Error satisfies the builtin error interface
func (e VirtualMachineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualMachine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualMachineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualMachineValidationError{}
